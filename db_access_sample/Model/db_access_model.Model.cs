//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 12-Jul-18 15:42:49
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace app_global
{

  public partial class Model : DbContext
  {

    public Model() :
        base()
    {
      OnCreated();
    }

    public Model(DbContextOptions<Model> options) :
        base(options)
    {
      OnCreated();
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
      //utk star schema
      try
      {
        if (!optionsBuilder.IsConfigured)
        {
          optionsBuilder.UseMySql("Server=localhost;Port=30000;Database=db_access_test;Uid=db_access_user;Pwd=db_access_password;"); //change this connection properties according to yours
          CustomizeConfiguration(ref optionsBuilder);
          base.OnConfiguring(optionsBuilder);
        }
      }
      catch (Exception e)
      {
        Console.WriteLine(e.Message);
      }
    }

    partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

    public virtual DbSet<enumerator> enumerators
    {
      get;
      set;
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
      this.enumeratorMapping(modelBuilder);
      this.CustomizeenumeratorMapping(modelBuilder);

      RelationshipsMapping(modelBuilder);
      CustomizeMapping(ref modelBuilder);
    }

    #region enumerator Mapping

    private void enumeratorMapping(ModelBuilder modelBuilder)
    {
      modelBuilder.Entity<enumerator>().ToTable(@"enumerators");
      modelBuilder.Entity<enumerator>().Property<int>(x => x.enumerator_id).HasColumnName(@"enumerator_id").IsRequired().ValueGeneratedOnAdd();
      modelBuilder.Entity<enumerator>().Property<double>(x => x.enumerator_value).HasColumnName(@"enumerator_value").IsRequired().ValueGeneratedNever();
      modelBuilder.Entity<enumerator>().HasKey(@"enumerator_id");
    }

    partial void CustomizeenumeratorMapping(ModelBuilder modelBuilder);

    #endregion

    private void RelationshipsMapping(ModelBuilder modelBuilder)
    {
    }

    partial void CustomizeMapping(ref ModelBuilder modelBuilder);

    public bool HasChanges()
    {
      return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
    }

    partial void OnCreated();
  }
}
